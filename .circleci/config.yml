# Python CircleCI 2.0 configuration file:
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#

defaults: &defaults
  working_directory: ~/lolstats/server
  docker:
    - image: circleci/python:3.6.1


machine:
  python:
    version: 3.6.1

version: 2
jobs:
  build:
    <<: *defaults
    steps:
      - checkout:
          path: ~/lolstats
      - restore_cache:
          key: dependency-cache-{{ checksum "requirements.txt" }}
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            python3 -m pip install -r requirements.txt
      - save_cache:
          key: dependency-cache-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run:
          name: Print CI Env Vars to augment build/test description
          command: |
            echo "CI		                is ${CI}"			 	
            echo "CI_PULL_REQUEST			is ${CI_PULL_REQUEST}"
            echo "CI_PULL_REQUESTS		    is ${CI_PULL_REQUESTS}"
            echo "CIRCLE_BRANCH			    is ${CIRCLE_BRANCH}"
            echo "CIRCLE_BUILD_NUM		    is ${CIRCLE_BUILD_NUM}"
            echo "CIRCLE_BUILD_URL		    is ${CIRCLE_BUILD_URL}"
            echo "CIRCLE_COMPARE_URL	    is ${CIRCLE_COMPARE_URL}"
            echo "CIRCLE_INTERNAL_TASK_DATA is ${CIRCLE_INTERNAL_TASK_DATA}"
            echo "CIRCLE_JOB				is ${CIRCLE_JOB}"
            echo "CIRCLE_NODE_INDEX		    is ${CIRCLE_NODE_INDEX}"
            echo "CIRCLE_NODE_TOTAL		    is ${CIRCLE_NODE_TOTAL}"
            echo "CIRCLE_PR_NUMBER		    is ${CIRCLE_PR_NUMBER}"
            echo "CIRCLE_PR_REPONAME		is ${CIRCLE_PR_REPONAME}"
            echo "CIRCLE_PR_USERNAME		is ${CIRCLE_PR_USERNAME}"
            echo "CIRCLE_PREVIOUS_BUILD_NUM is ${CIRCLE_PREVIOUS_BUILD_NUM}"
            echo "CIRCLE_PROJECT_REPONAME	is ${CIRCLE_PROJECT_REPONAME}"
            echo "CIRCLE_PROJECT_USERNAME	is ${CIRCLE_PROJECT_USERNAME}"
            echo "CIRCLE_PULL_REQUEST		is ${CIRCLE_PULL_REQUEST}"
            echo "CIRCLE_PULL_REQUESTS	    is ${CIRCLE_PULL_REQUESTS}"
            echo "CIRCLE_REPOSITORY_URL	    is ${CIRCLE_REPOSITORY_URL}"
            echo "CIRCLE_SHA1				is ${CIRCLE_SHA1}"
            echo "CIRCLE_TAG				is ${CIRCLE_TAG}"
            echo "CIRCLE_USERNAME			is ${CIRCLE_USERNAME}"
            echo "CIRCLE_WORKFLOW_ID		is ${CIRCLE_WORKFLOW_ID}"
            echo "CIRCLE_WORKING_DIRECTORY  is ${CIRCLE_WORKING_DIRECTORY}"
            echo "CIRCLECI				    is ${CIRCLECI}"
            echo "HOME					    is ${HOME}"
      - run:
          name: build failed notification
          command: |
              . venv/bin/activate
              python3 bot.py "BUILD FAILED"
          when: on_fail



    # run tests!
    # this example uses Django's built-in test-runner
    # other common Python testing frameworks include pytest and nose
    # https://pytest.org
    # https://nose.readthedocs.io
  test:
    <<: *defaults
    steps:
      - checkout:
          path: ~/lolstats
      - restore_cache:
          key: dependency-cache-{{ checksum "requirements.txt" }}
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            python3 -m pip install -r requirements.txt
      - save_cache:
          key: dependency-cache-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run:
          name: run tests
          command:
            echo "Testing..."
      - run:
          name: tests failed notification
          command: |
              . venv/bin/activate
              python3 bot.py "TESTS FAILED"
          when: on_fail
  notifySuccess:
    <<: *defaults
    steps:
      - checkout:
          path: ~/lolstats
      - restore_cache:
          key: dependency-cache-{{ checksum "requirements.txt" }}
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            python3 -m pip install -r requirements.txt
      - save_cache:
          key: dependency-cache-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run:
          name: ci success notification
          command: |
              . venv/bin/activate
              python3 bot.py "Master Ci pipline passed!"


workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - test:
          requires:
            - build
      - notifySuccess:
          requires:
            - build
            - test
          filters:
            branches:
              only: master
