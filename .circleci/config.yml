# Python CircleCI 2.0 configuration file:
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#

defaults: &defaults
  working_directory: ~/lolstats/server
  docker:
    - image: circleci/python:3.6.1


machine:
  python:
    version: 3.6.1

version: 2
jobs:
  build:
    <<: *defaults 
    steps:
      - checkout:
          path: ~/lolstats
      - restore_cache:
          key: dependency-cache-{{ checksum "requirements.txt" }}
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            python3 -m pip install -U pip setuptools virtualenv
      - save_cache:
          key: dependency-cache-{{ checksum "requirements.txt" }}
          paths:
            - ./venv
      - run:
          name: build failed notification
          command: ./bot.py "BUILD FAILED"
          when: on_fail
      - run:
          name: success pls
          command: ./bot.py "SUCCESS YAAAYY"
          when: on_success

          
 
    # run tests!
    # this example uses Django's built-in test-runner
    # other common Python testing frameworks include pytest and nose
    # https://pytest.org
    # https://nose.readthedocs.io
  test:
    <<: *defaults
    steps:
      - checkout:
          path: ~/lolstats
      - run:
          name: run tests
          command: |
            #. venv/bin/activate
            #python manage.py test
            echo "Testing..."
      - run:
          name: tests failed notification
          command: python3 -m bot "TESTS FAILED"
          when: on_fail
  notifySuccess:
    <<: *defaults
    steps:
      - checkout:
          path: ~/lolstats
      - run:
          name: ci success notification
          command: python3 -m bot "Ci pipline passed!"


workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - test:
          requires:
            - build
      - notifySuccess:
          requires:
            - build
            - test
